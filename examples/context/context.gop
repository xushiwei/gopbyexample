// In the previous example we looked at setting up a simple
// [HTTP server](http-servers). HTTP servers are useful for
// demonstrating the usage of `context.Context` for
// controlling cancellation. A `Context` carries deadlines,
// cancellation signals, and other request-scoped values
// across API boundaries and goroutines.

import (
	"net/http"
	"time"
)

func hello(w http.ResponseWriter, req *http.Request) {

	// A `context.Context` is created for each request by
	// the `net/http` machinery, and is available with
	// the `Context()` method.
	ctx := req.context()
	println "server: hello handler started"
	defer println("server: hello handler ended")

	// Wait for a few seconds before sending a reply to the
	// client. This could simulate some work the server is
	// doing. While working, keep an eye on the context's
	// `Done()` channel for a signal that we should cancel
	// the work and return as soon as possible.
	select {
	case <-time.after(10 * time.Second):
		fprintf w, "hello\n"
	case <-ctx.done():
		// The context's `Err()` method returns an error
		// that explains why the `Done()` channel was
		// closed.
		err := ctx.err()
		println "server:", err
		internalError := http.StatusInternalServerError
		http.error w, err.error(), internalError
	}
}

// As before, we register our handler on the "/hello"
// route, and start serving.
http.handleFunc "/hello", hello
http.listenAndServe ":8090", nil
