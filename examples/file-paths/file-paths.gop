// The `filepath` package provides functions to parse
// and construct *file paths* in a way that is portable
// between operating systems; `dir/file` on Linux vs.
// `dir\file` on Windows, for example.

import (
	"path/filepath"
	"strings"
)

// `Join` should be used to construct paths in a
// portable way. It takes any number of arguments
// and constructs a hierarchical path from them.
p := filepath.join("dir1", "dir2", "filename")
println "p:", p

// You should always use `Join` instead of
// concatenating `/`s or `\`s manually. In addition
// to providing portability, `Join` will also
// normalize paths by removing superfluous separators
// and directory changes.
println filepath.join("dir1//", "filename")
println filepath.join("dir1/../dir1", "filename")

// `Dir` and `Base` can be used to split a path to the
// directory and the file. Alternatively, `Split` will
// return both in the same call.
println "Dir(p):", filepath.dir(p)
println "Base(p):", filepath.base(p)

// We can check whether a path is absolute.
println filepath.isAbs("dir/file")
println filepath.isAbs("/dir/file")

filename := "config.json"

// Some file names have extensions following a dot. We
// can split the extension out of such names with `Ext`.
ext := filepath.ext(filename)
println ext

// To find the file's name with the extension removed,
// use `strings.TrimSuffix`.
println strings.trimSuffix(filename, ext)

// `Rel` finds a relative path between a *base* and a
// *target*. It returns an error if the target cannot
// be made relative to base.
rel, err := filepath.rel("a/b", "a/b/t/file")
if err != nil {
	panic err
}
println rel

rel, err = filepath.rel("a/b", "a/c/t/file")
if err != nil {
	panic err
}
println rel
