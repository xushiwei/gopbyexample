// Parsing numbers from strings is a basic but common task
// in many programs; here's how to do it in Go.

// The built-in package `strconv` provides the number
// parsing.
import (
	"strconv"
)

// With `ParseFloat`, this `64` tells how many bits of
// precision to parse.
f, _ := strconv.parseFloat("1.234", 64)
println f

// For `ParseInt`, the `0` means infer the base from
// the string. `64` requires that the result fit in 64
// bits.
i, _ := strconv.parseInt("123", 0, 64)
println i

// `ParseInt` will recognize hex-formatted numbers.
d, _ := strconv.parseInt("0x1c8", 0, 64)
println d

// A `ParseUint` is also available.
u, _ := strconv.parseUint("789", 0, 64)
println u

// `Atoi` is a convenience function for basic base-10
// `int` parsing.
k, _ := strconv.atoi("135")
println k

// Parse functions return an error on bad input.
_, e := strconv.atoi("wat")
println e
