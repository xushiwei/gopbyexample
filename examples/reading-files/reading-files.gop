// Reading and writing files are basic tasks needed for
// many Go programs. First we'll look at some examples of
// reading files.

import (
	"bufio"

	"io"
	"os"
)

// Reading files requires checking most calls for errors.
// This helper will streamline our error checks below.
func check(e error) {
	if e != nil {
		panic e
	}
}

// Perhaps the most basic file reading task is
// slurping a file's entire contents into memory.
dat, err := os.readFile("/tmp/dat")
check err
print string(dat)

// You'll often want more control over how and what
// parts of a file are read. For these tasks, start
// by `Open`ing a file to obtain an `os.File` value.
f, err := os.open("/tmp/dat")
check err

// Read some bytes from the beginning of the file.
// Allow up to 5 to be read but also note how many
// actually were read.
b1 := make([]byte, 5)
n1, err := f.read(b1)
check err
printf "%d bytes: %s\n", n1, string(b1[:n1])

// You can also `Seek` to a known location in the file
// and `Read` from there.
o2, err := f.seek(6, 0)
check err
b2 := make([]byte, 2)
n2, err := f.read(b2)
check err
printf "%d bytes @ %d: ", n2, o2
printf "%v\n", string(b2[:n2])

// The `io` package provides some functions that may
// be helpful for file reading. For example, reads
// like the ones above can be more robustly
// implemented with `ReadAtLeast`.
o3, err := f.seek(6, 0)
check err
b3 := make([]byte, 2)
n3, err := io.readAtLeast(f, b3, 2)
check err
printf "%d bytes @ %d: %s\n", n3, o3, string(b3)

// There is no built-in rewind, but `Seek(0, 0)`
// accomplishes this.
_, err = f.seek(0, 0)
check err

// The `bufio` package implements a buffered
// reader that may be useful both for its efficiency
// with many small reads and because of the additional
// reading methods it provides.
r4 := bufio.newReader(f)
b4, err := r4.peek(5)
check err
printf "5 bytes: %s\n", string(b4)

// Close the file when you're done (usually this would
// be scheduled immediately after `Open`ing with
// `defer`).
f.close
