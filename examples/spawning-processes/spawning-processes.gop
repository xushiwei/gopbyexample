// Sometimes our Go programs need to spawn other, non-Go
// processes.

import (
	"io"
	"os/exec"
)

// We'll start with a simple command that takes no
// arguments or input and just prints something to
// stdout. The `exec.Command` helper creates an object
// to represent this external process.
dateCmd := exec.command("date")

// `.Output` is another helper that handles the common
// case of running a command, waiting for it to finish,
// and collecting its output. If there were no errors,
// `dateOut` will hold bytes with the date info.
dateOut, err := dateCmd.output()
if err != nil {
	panic err
}
println "> date"
println string(dateOut)

// Next we'll look at a slightly more involved case
// where we pipe data to the external process on its
// `stdin` and collect the results from its `stdout`.
grepCmd := exec.command("grep", "hello")

// Here we explicitly grab input/output pipes, start
// the process, write some input to it, read the
// resulting output, and finally wait for the process
// to exit.
grepIn, _ := grepCmd.stdinPipe()
grepOut, _ := grepCmd.stdoutPipe()
grepCmd.start
grepIn.write []byte("hello grep\ngoodbye grep")
grepIn.close
grepBytes, _ := io.readAll(grepOut)
grepCmd.wait

// We omitted error checks in the above example, but
// you could use the usual `if err != nil` pattern for
// all of them. We also only collect the `StdoutPipe`
// results, but you could collect the `StderrPipe` in
// exactly the same way.
println "> grep hello"
println string(grepBytes)

// Note that when spawning commands we need to
// provide an explicitly delineated command and
// argument array, vs. being able to just pass in one
// command-line string. If you want to spawn a full
// command with a string, you can use `bash`'s `-c`
// option:
lsCmd := exec.command("bash", "-c", "ls -a -l -h")
lsOut, err := lsCmd.output()
if err != nil {
	panic err
}
println "> ls -a -l -h"
println string(lsOut)
