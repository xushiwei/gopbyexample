// [Timers](timers) are for when you want to do
// something once in the future - _tickers_ are for when
// you want to do something repeatedly at regular
// intervals. Here's an example of a ticker that ticks
// periodically until we stop it.

import (
	"time"
)

// Tickers use a similar mechanism to timers: a
// channel that is sent values. Here we'll use the
// `select` builtin on the channel to await the
// values as they arrive every 500ms.
ticker := time.newTicker(500 * time.Millisecond)
done := make(chan bool)

go func() {
	for {
		select {
		case <-done:
			return
		case t := <-ticker.C:
			println "Tick at", t
		}
	}
}()

// Tickers can be stopped like timers. Once a ticker
// is stopped it won't receive any more values on its
// channel. We'll stop ours after 1600ms.
time.sleep 1600*time.Millisecond
ticker.stop
done <- true
println "Ticker stopped"
