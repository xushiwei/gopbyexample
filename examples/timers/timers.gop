// We often want to execute Go code at some point in the
// future, or repeatedly at some interval. Go's built-in
// _timer_ and _ticker_ features make both of these tasks
// easy. We'll look first at timers and then
// at [tickers](tickers).

import (
	"time"
)

// Timers represent a single event in the future. You
// tell the timer how long you want to wait, and it
// provides a channel that will be notified at that
// time. This timer will wait 2 seconds.
timer1 := time.newTimer(2 * time.Second)

// The `<-timer1.C` blocks on the timer's channel `C`
// until it sends a value indicating that the timer
// fired.
<-timer1.C
println "Timer 1 fired"

// If you just wanted to wait, you could have used
// `time.Sleep`. One reason a timer may be useful is
// that you can cancel the timer before it fires.
// Here's an example of that.
timer2 := time.newTimer(time.Second)
go func() {
	<-timer2.C
	println "Timer 2 fired"
}()
stop2 := timer2.stop()
if stop2 {
	println "Timer 2 stopped"
}

// Give the `timer2` enough time to fire, if it ever
// was going to, to show it is in fact stopped.
time.sleep 2*time.Second
