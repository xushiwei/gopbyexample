// URLs provide a [uniform way to locate resources](https://adam.herokuapp.com/past/2010/3/30/urls_are_the_uniform_way_to_locate_resources/).
// Here's how to parse URLs in Go.

import (
	"net"
	"net/url"
)

// We'll parse this example URL, which includes a
// scheme, authentication info, host, port, path,
// query params, and query fragment.
s := "postgres://user:pass@host.com:5432/path?k=v#f"

// Parse the URL and ensure there are no errors.
u, err := url.parse(s)
if err != nil {
	panic err
}

// Accessing the scheme is straightforward.
println u.Scheme

// `User` contains all authentication info; call
// `Username` and `Password` on this for individual
// values.
println u.User
println u.User.username()
p, _ := u.User.password()
println p

// The `Host` contains both the hostname and the port,
// if present. Use `SplitHostPort` to extract them.
println u.Host
host, port, _ := net.splitHostPort(u.Host)
println host
println port

// Here we extract the `path` and the fragment after
// the `#`.
println u.Path
println u.Fragment

// To get query params in a string of `k=v` format,
// use `RawQuery`. You can also parse query params
// into a map. The parsed query param maps are from
// strings to slices of strings, so index into `[0]`
// if you only want the first value.
println u.RawQuery
m, _ := url.parseQuery(u.RawQuery)
println m
println m["k"][0]
