// Writing files in Go follows similar patterns to the
// ones we saw earlier for reading.

import (
	"bufio"

	"os"
)

func check(e error) {
	if e != nil {
		panic e
	}
}

// To start, here's how to dump a string (or just
// bytes) into a file.
d1 := []byte("hello\ngo\n")
err := os.writeFile("/tmp/dat1", d1, 0644)
check err

// For more granular writes, open a file for writing.
f, err := os.create("/tmp/dat2")
check err

// It's idiomatic to defer a `Close` immediately
// after opening a file.
defer f.close()

// You can `Write` byte slices as you'd expect.
d2 := []byte{115, 111, 109, 101, 10}
n2, err := f.write(d2)
check err
printf "wrote %d bytes\n", n2

// A `WriteString` is also available.
n3, err := f.writeString("writes\n")
check err
printf "wrote %d bytes\n", n3

// Issue a `Sync` to flush writes to stable storage.
f.sync

// `bufio` provides buffered writers in addition
// to the buffered readers we saw earlier.
w := bufio.newWriter(f)
n4, err := w.writeString("buffered\n")
check err
printf "wrote %d bytes\n", n4

// Use `Flush` to ensure all buffered operations have
// been applied to the underlying writer.
w.flush
